tnlLinearSystemAssembler< Mesh,
                             DofVectorType,
                             DifferentialOperator,
                             BoundaryCondition,
                             RightHandSide,
                             tnlBackwardTimeDiscretisation,
                             Matrix > systemAssembler;
   systemAssembler

tnlLinearDiffusion - je v i heat equation 
tnlAnalyticNeumannBoundaryConditions - nastavi neumanna na kraji jako template bude funkce tnlConstantFunction
tnlNoTimeDiscretization - nedela nic s pravou stranou a nemeni diagonalu

jako pravou stranu pouzit opet tnlConstantFunction

Pouzivej EllPack!!!


2) Zatim resit se SOR, ale pak zkusit udelat Jacobiho
bool tnlSORSolver< Matrix, Preconditioner > :: solve( const Vector& b, v podstate je treba zmenit jen matrix->performSORIteration na nejakou vlastni 
bool tnlEllpackMatrix< Real, Device, Index > :: performSORIteration( 






TODO: v tnlMeshResolver se provadi preklad pro vsechny mozne sablonove parametry => prorezat

TODO: napsat FunctionDiscretizer pro jednotne rozhrani RightHandSide

TODO: doplnit mesh travelsals pro jine mesh entity nez cell
TODO: implementace maticovych resicu
      * Gaussova eliminace
      * SOR metoda
      * Jacobiho metoda
      * TFQMR metoda
      * IDR metody 

TODO: Nahradit sablonovy parametr dimenze sitove entity za typ entity. V pripade hran gridu, by ty v sobe mohly mit i orientaci.
      Asi by to bylo vyhodne i pro site se smisenym typem entit. 

TODO: implementovat tridu tnlFileName pro generovani jmen souboru

TODO: metodu pro tnlString pro nahrazeni napr. podretezce XXXXX indexem 00001 tj. uXXXXX.bin -> u00001.bin
      to by melo byt robustnejsi, nez doposavadni pristup 

TODO: vyjimky 

TODO: prubezne ukladani vysledku behem vypoctu 
                 