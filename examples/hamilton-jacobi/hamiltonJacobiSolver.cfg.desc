group Problem
{
   integer dimensions(!)                  	[Number of dimenions the problem is defined in.];
   string problem-name( "hamilton-jacobi" ) 	[This defines particular problem.];
   string log-file("hamiltonJacobi-problem.log")  		[File name for the log.]; 
},[The problem parameters.];

group Discretisation
{
   string mesh("mesh.tnl")                   [A file containing the numerical mesh.];
   string initial-condition( "init.tnl" )    [A file containing the initial condition];
   string time-discretisation(!)             [Time discretisation for the time dependent problems. Can be explicit, semi-implicit or fully-implicit.];
},[The numerical scheme set-up.];

group Solver
{
   string real-type( "double" )     [Precision of the floating point arithmetics. Can be float, double, long-double.];
   string index-type( "int" )       [Indexing type for arrays, vectors, matrices etc. Can be int or long-int.];
   string device( "host" )          [Device to use for the computations. Can be host or cuda.];
   string discrete-solver(!)        [The main solver for the discretised problem.];
   real merson-adaptivity(1.0e-4)   [Parameter controling adaptivity of the Runge-Kutta-Merson solver.];
   real initial-tau(1.0e-5)         [Initial time step for the time dependent PDE solver. It can be changed if an adaptive solver is used.];
   real snapshot-period(!)          [Time period for writing a state of the time dependent problem to a file.];
   real final-time(!)               [Stop time of the time dependent simulation.];
   integer verbose(1)               [Set the verbose mode. The higher number the more messages are generated.];
   real epsilon(1.0e-4)		    [Sets epsilon for sign() smoothening];
   integer analytic(0)		    [1-0 Bool for generating or not-generating analytic solution.];
   integer functionid(1)	    [Sets SDF function, that will be analyticaly generated, functionID = {1,2,3}.];
   string scheme ( "upwind" )       [Choose godunov, upwind or regularised scheme. (regularised requires parameter reg-epsilon)];
   real reg-epsilon( 1.0e-4 )       [Epsilon for artificial viscosity in regularised scheme.];
   integer scheme-test(0)	    [Scheme test boolean.];
},[The solver set-up.];


